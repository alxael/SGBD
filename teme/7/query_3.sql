CREATE OR REPLACE FUNCTION GET_CINEMA_ID_FOR_SCREENING_ID (
    ID_SCREENING SCREENING.SCREENING_ID%TYPE
) RETURN CINEMA.CINEMA_ID%TYPE IS
    ID_AUDITORIUM AUDITORIUM.AUDITORIUM_ID%TYPE;
    ID_CINEMA     CINEMA.CINEMA_ID%TYPE;
    CNT           NUMBER;
BEGIN
    SELECT
        S.AUDITORIUM_ID INTO ID_AUDITORIUM
    FROM
        SCREENING S
    WHERE
        S.SCREENING_ID = ID_SCREENING;
    SELECT
        A.CINEMA_ID INTO ID_CINEMA
    FROM
        AUDITORIUM A
    WHERE
        A.AUDITORIUM_ID = ID_AUDITORIUM;
    RETURN ID_CINEMA;
END GET_CINEMA_ID_FOR_SCREENING_ID;
/

CREATE OR REPLACE FUNCTION GET_PRICE_FOR_SCREENING_ID (
    ID_SCREENING SCREENING.SCREENING_ID%TYPE
) RETURN SCREENING.PRICE%TYPE IS
    PRICE SCREENING.PRICE%TYPE;
BEGIN
    SELECT
        S.PRICE INTO PRICE
    FROM
        SCREENING S
    WHERE
        S.SCREENING_ID = ID_SCREENING;
    return PRICE;
END GET_PRICE_FOR_SCREENING_ID;
/

CREATE OR REPLACE PROCEDURE UPDATE_CINEMA_REVENUE(
    ID_CINEMA CINEMA.CINEMA_ID%TYPE,
    REVENUE_CHANGE CINEMA_REVENUE.REVENUE%TYPE
) AS
BEGIN
    UPDATE CINEMA_REVENUE CR
    SET
        CR.REVENUE = NVL(
            CR.REVENUE,
            0
        ) + REVENUE_CHANGE
    WHERE
        CR.CINEMA_ID = ID_CINEMA;
END UPDATE_CINEMA_REVENUE;
/

CREATE OR REPLACE TRIGGER UPDATE_CINEMA_REVENUE AFTER
    DELETE OR UPDATE OR INSERT OF SCREENING_ID ON RESERVATION FOR EACH ROW
BEGIN
    IF DELETING THEN
        UPDATE_CINEMA_REVENUE(GET_CINEMA_ID_FOR_SCREENING_ID(:OLD.SCREENING_ID), -1 * GET_PRICE_FOR_SCREENING_ID(:OLD.SCREENING_ID));
    ELSIF UPDATING THEN
        UPDATE_CINEMA_REVENUE(GET_CINEMA_ID_FOR_SCREENING_ID(:OLD.SCREENING_ID), -1 * GET_PRICE_FOR_SCREENING_ID(:OLD.SCREENING_ID));
        UPDATE_CINEMA_REVENUE(GET_CINEMA_ID_FOR_SCREENING_ID(:NEW.SCREENING_ID), GET_PRICE_FOR_SCREENING_ID(:NEW.SCREENING_ID));
    ELSE
        UPDATE_CINEMA_REVENUE(GET_CINEMA_ID_FOR_SCREENING_ID(:NEW.SCREENING_ID), GET_PRICE_FOR_SCREENING_ID(:NEW.SCREENING_ID));
    END IF;
END;
/